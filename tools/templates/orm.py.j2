from typing import List, Optional

from pydicom import Dataset
from sqlalchemy import Float, ForeignKey, String
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship

from dicomindex.fields import InstanceLevel, SeriesLevel, StudyLevel
from dicomindex.types import DICOMDate, DICOMDateTime, DICOMFlattenedString, \
    DICOMIntegerString, DICOMMultipleString, DICOMName, DICOMSequence, DICOMTime, \
    DICOMUID


class Base(DeclarativeBase):
    pass


class Patient(Base):
    __tablename__ = "patient"
    PatientID: Mapped[str] = mapped_column(primary_key=True)
    studies: Mapped[List["Study"]] = relationship(
    back_populates="patient", cascade="all, delete-orphan")

    @classmethod
    def init_from_dataset(cls, dataset: Dataset):
        """Try to fill all fields of this model with info from dataset"""
        return cls(PatientID=dataset.PatientID)


class Study(Base):
    __tablename__ = "study"
    StudyInstanceUID: Mapped[str] = mapped_column(primary_key=True)
    PatientID: Mapped[str] = mapped_column(ForeignKey("patient.PatientID"))
    patient: Mapped["Patient"] = relationship(back_populates="studies")
    series: Mapped[List["Series"]] = relationship(back_populates="study",
        cascade="all, delete-orphan")

    # === DICOM fields ==={% for field in study_fields%}
    {{ field }} {% endfor %}

    @classmethod
    def init_from_dataset(cls, dataset: Dataset):
        """Try to fill all fields of this model with info from dataset"""
        fields_to_transfer = StudyLevel.fields.union({'PatientID'})
        return cls(**{tag: dataset.get(tag) for tag in fields_to_transfer})


class Series(Base):
    __tablename__ = "series"
    SeriesInstanceUID: Mapped[str] = mapped_column(primary_key=True)
    StudyInstanceUID: Mapped[str] = mapped_column(ForeignKey("study.StudyInstanceUID"))
    study: Mapped["Study"] = relationship(back_populates="series")
    instances: Mapped[List["Instance"]] = relationship(back_populates="series",
                                                  cascade="all, delete-orphan")

    # === DICOM fields ==={% for field in series_fields%}
    {{ field }} {% endfor %}

    @classmethod
    def init_from_dataset(cls, dataset: Dataset):
        """Try to fill all fields of this model with info from dataset"""
        fields_to_transfer = SeriesLevel.fields.union({'StudyInstanceUID'})
        return cls(**{tag: dataset.get(tag) for tag in fields_to_transfer})


class Instance(Base):
    __tablename__ = "instance"
    SOPInstanceUID: Mapped[str] = mapped_column(primary_key=True)
    SeriesInstanceUID: Mapped[str] = mapped_column(
        ForeignKey("series.SeriesInstanceUID"))
    series: Mapped["Series"] = relationship(back_populates="instances")
    path: Mapped[str] = mapped_column(String(512))

    # === DICOM fields ==={% for field in instance_fields%}
    {{ field }} {% endfor %}

    @classmethod
    def init_from_dataset(cls, dataset: Dataset, path: str):
        """Try to fill all fields of this model with info from dataset"""
        fields_to_transfer = InstanceLevel.fields.union({'SeriesInstanceUID'})
        param_dict = {tag: dataset.get(tag) for tag in fields_to_transfer}
        param_dict['path'] = path
        return cls(**param_dict)


